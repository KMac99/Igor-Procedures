#pragma rtGlobals=1		// Use modern global access method.//kate analysis procs v2.ipf#Include <Concatenate waves>		|this also Includes <Strings as Lists>#include <Strings as Lists>Menu "KateAnalysis"	"Make Rainbow colors", ColorStyleMacro()	"Clip Spike",SpikeClip()	"Undo spike clip",UndoSpikeClip()	//"Blank Artifact Wave",BlankArtifactWave()	//"Undo Blank Artifact Wave", UndoBlankArtifact()	//"Blank at Cursors",BlankAtCursors()	//"Undo Blank at Cursors",UndoBlankAtCursors()"Grab Current Graph Axis", GrabCurrentAxis()"Paste Axis to Grabbed Axis Values", PasteAxis()	//"Stamp the Expt Date", StampExptDate()	"Set Baselines to zero", ZeroBaseline()	"Set Baselines to zero, cursors",ZeroBaselineAtCursors()	//"Align Trace Offsets", AlignTracesVertically()//"Crop All Waves in Graph", CropAllWaves()"Zero waves at X=0",RescaleWavesToX0()	"Re-Zero waves at Csr A x-value", RescaleWavesXToCsr()	//"Replot waves in Graph", RePlotData()	//"Kill All Graphs and Layouts", KillAllGraphs()	//"Kill SubWaves", KillSubWaves()	//"Kill All Waves", KillAllWaves()	//"Set all left axes",SetAllAxes()	//"Set all bottom axes",SetAllBottomAxes()	//"Plot a horizontal line", PlotHorizontal()	//"Plot a diagonal line", PlotDiagonal()	//"Plot a vertical line", PlotVertical()	//"Plot Zero Crossings",PlotZeroCrossings()	//"Get Steady State Values",GetSteadyState()end//function LoadPlotAndAverage()////procedure to quickly load & plot sets of data (sets & trials) & do within window Averaging//// designed for IV files, larger # of sets.//	string ctrlname//	string fileNameStr//	String  totalStr//	variable j=0//	variable i=0//	variable trialStart  = 0//	variable 	trialNum //	variable	trialEnd  = 4//	variable setStart =1//	variable setEnd =2//	string  basename = "IV_20Nov07c1"//	string trialtag = "_A"//	string AveBaseName="TraceAvg_"//	string TempAvgWaveName//	string ErrorName = "errorwave"//	variable AvgIndex=0//	string TempWaveList=""//	SVAR pathnameStr = root:LoadDataPanel:pathnameStr	// use path & endtag from Load panel//	SVAR endtag   = root:LoadDataPanel:endtag//	Dowindow/K AverageWaveOverlay//	Display as "Average Waves"//	Dowindow/C AverageWaveOverlay//	j=trialStart//	do//		display//		i=setStart//		do//		fileNameStr=basename +num2str(i) + trialtag+ num2str(j) //	//	print "Loading " + filenameStr//		TotalStr=pathnameStr+filenamestr+endtag//		LoadWave/H/A/O/Q TotalStr//		appendtograph $filenamestr//		TempWaveList+=fileNameStr+";"//		i+=1//		while(i<=SetEnd)//		TempAvgWaveName=AveBaseName+num2str(AvgIndex)//		fWaveAverage(TempWaveList, 1, 1, TempAvgWaveName, ErrorName)//		AppendtoGraph /W=AverageWaveOverlay $TempAvgWaveName//		AvgIndex+=1//		TempWaveList=""//		j+=1//	while(j<=trialEnd)//////endfunction NormalizeToY(myWave, y)	Wave myWave	variable y	variable/G NormFactor = y	//print NormFactor	myWave/=NormFactorendfunction NormalizeToPoint(myWave, point)	Wave myWave	variable point	variable/G NormFactor = myWave[point]	print NormFactor	myWave/=NormFactorend//function Normalize(myWave)//	Wave myWave//	variable/G NormFactor = myWave[0] //	print NormFactor//	myWave/=NormFactor//end////function UndoNormalize(myWave)//	Wave myWave//	NVAR NormFactor //	myWave*=NormFactor//endfunction BlankArtifactWave()	// Linear interpolation between two points in top wave of top graph.	string/G TopWin	string wlist, wn	variable  index=0	variable index_trials = 0	variable negBlankP =2	variable posBlankP =43	variable t	RemovefromGraph/Z showstimtimes	TopWin=WinList("*",";","WIN:")	wlist=WaveList("*",";","WIN:")		print wlist	do		wn=Stringfromlist(index_trials,wlist,";")			print wn		if (strlen(wn)==0)			print "end of trials list"			break		endif		index=0			WAVE w=$wn		Wave stim = StimTimes		duplicate/O w,BlankArt_undoWave		do			//print stim[index];			t=x2pnt(w,stim[index])			//print t;			w[t-negblankp,t+posblankp]=NAN			index+=1		while(index<numpnts(stim))		index_trials+=1	while (1)endfunction UndoBlankArtifact()	string wlist, wn	RemovefromGraph/Z showstimtimes	wlist=WaveList("*",";","WIN:")		wn=Stringfromlist(0,wlist,";")		print "undoing wave ", wn		WAVE w=$wn	if(waveexists(BlankArt_undoWave))	duplicate/O BlankArt_undoWave,w	Killwaves BlankArt_undoWave	else		abort "no wave to undo"	endifendfunction StampExptDate() 	String 	DateStr		=	date()		// assumes OS form: dd mmm, yyyy	String dStr = dateStr[0,1]+DateStr[3,5]+ dateStr[10,11]		// DY + MON + YR ~ '09Jul01'	string  ExptTitle	ExptTitle = dStr + " cell1 NA"	//ExptTitle ="11aug02 cell 1,  chick NM  "	Textbox/E/F=0  ExptTitle	endfunction SpikeClip()	// Linear interpolation between two points in top wave of top graph.	string/G TopWin	string wlist, wn	variable  index=0,slope	variable x_A=xcsr(A)	variable x_B=xcsr(B)	variable y_A=vcsr(A)	variable y_B=vcsr(B)	//print "xA=" + num2str(x_A) + "  yA=" + num2str(y_A) +"  xB=" + num2str(x_B) +"  yB=" + num2str(y_B) 	slope=(y_B-y_A)/(x_B-x_A)	//print "slope = " Num2str(slope)	TopWin=WinList("*",";","WIN:")	wlist=WaveList("*",";","WIN:")		wn=Stringfromlist(0,wlist,";")			WAVE w=$wn	duplicate/O w,SpikeClip_undoWave	//m=mean($wn,x_A,x_B)	w[x2pnt(w,x_A),x2pnt(w,x_B)-1]=slope*(x- x_A) +y_Aendfunction UndoSpikeClip()	string wlist, wn	wlist=WaveList("*",";","WIN:")		wn=Stringfromlist(0,wlist,";")			WAVE w=$wn	if(waveexists(SpikeClip_undoWave))	duplicate/O SpikeClip_undoWave,w	Killwaves SpikeClip_undoWave	else		abort "no wave to undo"	endifendfunction KateCalcStats(w)	string w	WAVE wv=$w	WaveStats/Q wv	variable mn=V_avg	variable sdev= V_sdev	Variable serr=sqrt(V_sdev^2/V_npnts)	variable variance = V_sdev^2	print "Wave Statistics for " + w +"  :   "	print "  average :    " + num2str(mn)	print "  sdev :         "  + num2str(sdev)	print "  serr :         "  + num2str(serr)	print "  variance :   "  + num2str(variance)endProc ColorStyleMacro() : GraphStyle	PauseUpdate; Silent 1		// modifying window...	string wlist = wavelist("*",";","WIN:")	variable n=ItemsInList(wlist)	variable numloop=ceil(n/11)	// loops through 11 colors & repeats	variable i =0	variable j=0	do	ModifyGraph/Z rgb[i+0]=(65535,0,0),rgb[i+1]=(65535,43690,0),rgb[i+2]=(52428,52425,1),rgb[i+3]=(32792,65535,1)	ModifyGraph/Z rgb[i+4]=(0,65535,0),rgb[i+5]=(1,26214,0),rgb[i+6]=(0,43690,65535),rgb[i+7]=(0,0,65535)	ModifyGraph/Z rgb[i+8]=(29524,1,58982),rgb[i+9]=(65535,0,26214),rgb[i+10]=(52428,1,20971)	i+=11	j+=1	while(j<numloop+2)EndMacroproc VoltCurrCurveStyleMacro(): GraphStyle	ModifyGraph mode=4,lstyle[0]=1	Label bottom "Current (nA)"	ModifyGraph zero=1;DelayUpdate	Label left "Voltage (V)"endmacroproc IVCurveStyleMacro(): GraphStyle	ModifyGraph mode=4,lstyle[0]=0,rgb[0]=(0,0,0)	Label left "EPSC (nA)"	ModifyGraph zero(left)=2,zero(bottom)=2	Label bottom "Voltage (V)"endmacroProc EvAn_AveragevsStimNumPlotStyle() : GraphStyle	PauseUpdate; Silent 1		// modifying window...	ModifyGraph/Z mode=4	ModifyGraph/Z marker[0]=19,marker[1]=16,marker[2]=17	ModifyGraph/Z lStyle[1]=1,lStyle[2]=2	ModifyGraph/Z rgb[0]=(0,0,0),rgb[1]=(0,0,0),rgb[2]=(0,0,0)	Label/Z bottom "Stimulus #"	SetAxis/Z/A/E=1 leftEndMacroProc EvAn_AvgPlotsLayoutStyle() : LayoutStyle	PauseUpdate; Silent 1		// modifying window...	ModifyLayout/Z frame=0,trans=1	ModifyLayout/Z left[0]=79,top[0]=82,width[0]=395,height[0]=179	ModifyLayout/Z left[1]=83,top[1]=496,width[1]=395,height[1]=208	ModifyLayout/Z left[2]=75,top[2]=280,width[2]=395,height[2]=208EndMacrofunction PlotHorizontal()	Make/O/N=2 horizontal	setScale/I x -90,30,""  horizontal	AppendToGraph horizontal	ModifyGraph rgb(horizontal)=(0,0,0), lstyle(horizontal)=3, lsize(horizontal)=2endfunction PlotDiagonal() 	Make /O/N=2 diag	diag[0]=0	diag[1]=1	AppendToGraph diagendfunction PlotVertical(xvalue)	variable xvalue	SetDrawEnv Linefgc=(65525,1,1)	drawline xvalue,0,xvalue,10endfunction PlotZeroCrossings()	Make/O/N=2 horizontal	setScale/I x -90,30,""  horizontal	AppendToGraph horizontal	SetDrawEnv Linefgc=(65525,1,1)	drawline 0,-2e-10,0,2e-10	ModifyGraph rgb(horizontal)=(0,0,0)end	function KillAllWaves()	KillWaves /A/Zendfunction KillSubWaves()      Silent 1;	string sublist,wn	variable index=0		sublist=WaveList("s_" + "*",";","")	do		wn=GetStrFromList(sublist,index,";")		if (strlen(wn)==0)				break		endif		KillWaves $wn		index+=1	while(1)end		Proc PlotData()	string wl, wn,gName,basename	string windowlist,anywindows, killvalue	variable index=0, j=0,numwaves	variable ymax, ymin, gymin=0, gymax=0	string suffix = "_A0"	basename="EvPSC_23Mar02c1_avg"	variable startset=6	variable endset=18	//wl=WaveList(baseName,";","")	////wn=GetStrFromList(wl,0,";")	Layout /P=Portrait as baseName	//numwaves=ItemsinList(wl)				variable i=startset	do		//wn=GetStrFromList(wl,index,";")				//if (strlen(wn)==0)		//	break		//endif		wn=basename +num2str(i) + suffix		if (index==0)			Duplicate/O $wn ywave		else			ywave = $wn		endif		WaveStats /Q ywave			//print V_min, V_max			if (V_max > gymax)			gymax = V_max		endif		if (V_min < gymin)			gymin = V_min		endif						Display /W=(200,150,426,300) $wn			Textbox/F=0/A=MT wn			gName=WinName(0,1)			appendtolayout /T $gName			if (index==numwaves-1)				ModifyGraph noLabel(bottom)=0			else				ModifyGraph noLabel(bottom)=2			endif			ModifyLayout Frame=0		i +=1	while(i<endset)		//SetAllAxes(-0.100,0.075)	//SetAllAxes(gymin,gymax)		DoWindow /F baseName		//if (index<6)		Tile/A=(index,1)	//else	//	tile/A=(5,ceil(index/5))	//endif	Killwaves/Z ywaveEndFunction SetAllLeftAxes(min,max)	variable max,min	string wlist, wn	variable index=0	wlist = WinList("*",";","WIN:1")	do		wn=GetStrFromList(wlist,index,";")					if (strlen(wn)==0)				break			endif		DoWindow /F $wn		SetAxis left min,max		index+=1	while(1)endFunction SetAllBottomAxes(min,max)	variable max,min	string wlist, wn	variable index=0	wlist = WinList("*",";","WIN:1")	do		wn=stringfromlist(index,wlist,";")					if (strlen(wn)==0)				break			endif		DoWindow /F $wn		SetAxis bottom min,max		index+=1	while(1)endfunction KillAllGraphs()	string wlist, wn	variable index=0		wlist = WinList("*",";","WIN:5")	print  "   Killing the following windows:   "  + wlist	do		wn=GetStrFromList(wlist,index,";")					if (strlen(wn)==0)				break			endif		DoWindow /K $wn		index+=1	while(1)end//function Appendwaves(dest,basename)//	string  dest,basename//	string wlist,matchstr		//matchstr=basename + "*"//	wlist = WaveList(matchstr,";","")//	print wlist//	Concatenatewavesinlist(dest, wlist)//	display $dest//	setaxis left -0.5, 0.1//	Textbox/F=0/M/A=RB basename//end/// APPENDWAVESLIST might not work with more than 9 separate trials.//function Appendwaveslist(dest,basename)	string  dest,basename	string wlist,matchstr,deststr,gName		string meanstrname	variable index =0		//Layout /P=portrait as basename	do			matchstr=basename +num2istr(index)+ "*"		wlist = WaveList(matchstr,";","")			if (strlen(wlist)==0)				break			endif		//print wlist		deststr=dest + num2istr(index)		Concatenatewavesinlist(deststr, wlist)		display /W=(200,100,680,260) $deststr		gName=WinName(0,1)		setaxis left -0.2, 0.1		Textbox/F=0/M/A=RT matchstr		AppendToLayout /T $gName		if (index==0)			duplicate $deststr sumwave,tempwave		else			tempwave=$deststr			sumwave+=tempwave		endif		index+=1	while(1)	print index	sumwave/=index			display /W=(200,100,680,260) sumwave	setaxis left -0.2, 0.1	meanstrname="mu_" + basename	textbox/F=0/M/A=RT meanstrname	gName=WinName(0,1)	AppendToLayout /T $gName	DoWindow /F baseName		if (index<9)		Tile/A=(index+2,1)	else		tile/A=(7,ceil(index/7))	endif		killwaves tempwave//end// Computes average of a list of waves.function AverageWavesInWindow(destName)			string  destName			string wn, w1			variable index =0					// get list of waves whose names start with basename			w1 = WaveList("*",";","WIN:")					// Make destination wave based on the first source wave.			wn = GetStrFromList(w1, 0, ";")			Duplicate /O $wn, $destName					Wave dest = $destName		dest = 0				do			wn = GetStrFromList(w1,index,";")			if (strlen(wn) == 0)				break			endif			Wave source = $wn			dest += source			index += 1		while (1)				dest /= indexendfunction WaveAverage(baseName, destName)			string baseName, destName			string wn, w1			variable index =0					// get list of waves whose names start with basename			w1 = WaveList(baseName+"*",";","")					// Make destination wave based on the first source wave.			wn = GetStrFromList(w1, 0, ";")			Duplicate /O $wn, $destName					Wave dest = $destName		dest = 0				do			wn = GetStrFromList(w1,index,";")			if (strlen(wn) == 0)				break			endif			Wave source = $wn			dest += source			index += 1		while (1)				dest /= indexendfunction AverageSomeWaves(baseName, destName,start,end)			string baseName, destName			variable start, end			string wn, w1			string suffix=""			variable index =0					// get list of waves whose names start with basename			w1 = WaveList(baseName+"*"+num2istr(start),";","")				// Make destination wave based on the first source wave.			wn = GetStrFromList(w1, 0, ";")			Duplicate /O $wn, $destName						Wave dest = $destName			dest = 0				index=start		do					if (index<10)			  suffix="000"+num2istr(index)			  else			if(index<100)			  suffix="00"+num2istr(index)			  else			    if(index<1000)			    suffix="0"+num2istr(index)			    else			    suffix=num2istr(index)			    endif			   endif			endif			  			w1 = WaveList(baseName+suffix,";","")			wn = GetStrFromList(w1,0,";")			if (strlen(wn) == 0)				print "Cannot find wave: 4digit numerical suffix?"				break			endif			Wave source = $wn			dest += source			index += 1		while (index<end+1)				dest /=(end-start+1)endfunction WaveErrorStats(baseName, destName)			string baseName, destName			string wn, w1			string destname1, destname2, destname3			variable index =0			variable numtrials					// get list of waves whose names start with basename in current window			w1 = WaveList(baseName+"*",";","WIN:")					// create a wavename for the mean, s.d., and s.e.m.			destname1= destName + "_mu"			destname2= destName + "_sigma"			destname3= destName + "_sem"								// Make destination wave based on the first source wave.			wn = GetStrFromList(w1, 0, ";")			Duplicate /O $wn, $destName1,$destName2,$destName3			Duplicate /O $wn, tempdest					Wave dest1 = $destName1		Wave dest2=  $destName2		Wave dest3=  $destName3		dest1=0		dest2=0		dest3=0		tempdest=0	///  calculate the mean wave		do			wn = GetStrFromList(w1,index,";")			if (strlen(wn) == 0)				break			endif			Wave source = $wn			dest1 += source			index += 1		while (1)				numtrials=index		print numtrials		dest1 /= numtrials				// dest1 is now the mean wave					index=0	/// calculate the difference from the mean		do			wn = GetStrFromList(w1,index,";")			if (strlen(wn) == 0)				break			endif			Wave source = $wn						tempdest +=  (dest1 - source )^2		// sum of mean-wave(i) squares									index += 1		while (1)				dest2=sqrt(tempdest/(numtrials-1))		// square root of above sum divided by degrees of freedom		dest3= dest2/sqrt(numtrials-1)			// standard error		//edit dest1,dest2,dest3				killwaves tempdestend		Macro RePlotData(spacing)	variable spacing		string wlist, wn	variable numwaves, index=0, j=0,m		//wlist=WaveList("Sp*",";","WIN:")	wlist=TraceNameList("",";",1)	print wlist	numwaves=ItemsinList(wlist)	PauseUpdate;			do		//wn=GetStrFromList(wlist,index,";")			wn=StringFromList(index,wlist,";")			if (strlen(wn)==0)			break		endif				m=  (numwaves-index)*spacing			ModifyGraph offset($wn)={0,m}		index +=1	while(1)			SetAxis left 0, (numwaves+0.5)*spacingendfunction AlignTracesVertically()	variable xvalue	variable yvalue		string wlist, wn	variable numwaves	variable index=0	variable j=0	variable m	//xvalue=1.799	xvalue=xcsr(A)	wlist=WaveList("*",";","WIN:")	print wlist	PauseUpdate;		// get first wave & its yvalue		wn=StringFromList(0,wlist,";")		print wn		WAVE w = $wn		yvalue=w(xvalue)		print yvalue			// get difference from others waves & adjust offsets	do		wn=StringFromList(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w = $wn		m=  yvalue-w(xvalue)		ModifyGraph/Z offset($wn)={0,m}		index +=1	while(1)	end//  Calculatesfunction GetSteadyState()	variable index,j	string wn,wlist	string basename,savename	index=0	j=0	basename="nrm_Pk_c1_AMPA_"	savename="SS_c1_AMPA"	Make/O/N=3 SSdataList, tempSSdata	tempSSdata=0	wlist=WaveList(basename + "*",";","WIN:")	print wlist	do		wn=GetStrFromList(wlist,index,";")		if (strlen(wn)==0)				break		endif		print wn		WAVE w =$wn		WaveStats /Q w		if (V_npnts==10)			// this is  for 0.1 and 0.2 hz, no recovery pulses			tempSSdata[0]=w[7]			tempSSdata[1]=w[8]			tempSSdata[2]=w[9]			else			if (V_npnts==6)	// this is for 2hz, shorter train, one recovery pulse				tempSSdata[0]=w[2]				tempSSdata[1]=w[3]				tempSSdata[2]=w[4]			else			  if (V_npnts==12)	// this is for 5,10,20,40hz, 10pulse train, two recovery pulse					tempSSdata[0]=w[7]					tempSSdata[1]=w[8]					tempSSdata[2]=w[9]			  else			  	print "wave does not fit expected stats"			  	break			  endif			endif		endif			if (index==0)				SSdataList=tempSSdata			else				ConcatenateWaves("SSdataList","tempSSdata")			endif		DoUpdate		index+=1	while(1)		WaveStats /Q SSdataList			print "Steady State value mean =" + num2str(V_avg) +"  +/- " +num2str(V_sdev) + " (s.d.)"		//duplicate/O tempPPdata $savename	//duplicate/O tempPPnames $(savename+"_Freq")endfunction CropOneWave(wname,x1,x2)	string wname	variable x1	variable x2	WAVE w = $wname		duplicate/O w, temp		duplicate/O/R=(x1,x2) temp, wendfunction CropAllWaves(x1,x2)	variable x1	variable x2	string wlist, wn	variable numwaves, index=0, j=0,m	wlist=WaveList("*",";","WIN:")	numwaves=ItemsinList(wlist)	PauseUpdate;			do		wn=stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w = $wn		duplicate/O w, temp		duplicate/O/R=(x1,x2) temp, w		index +=1	while(1)	endfunction RescaleWavesToX0()	variable startx	variable deltx	string wlist, wn	variable numwaves, index=0,m	wlist=WaveList("*",";","WIN:")	wn=stringfromlist(index,wlist,";")	WAVE w= $wn	startx=0	deltx = deltax(w)			do		wn=stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w=$wn		SetScale/P x startx,deltx,"s", w		index +=1	while(1)	endfunction RescaleWavesXToCsr()	variable startx	variable deltx, xvalueA	string wlist, wn	variable numwaves, index=0,m	xvalueA=xcsr(A)	wlist=WaveList("*",";","WIN:")	wn=stringfromlist(index,wlist,";")	WAVE w= $wn		deltx = deltax(w)			startx=leftx(w)-xvalueA	do		wn=stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w=$wn		SetScale/P x startx,deltx,"s", w		index +=1	while(1)	end	function ZeroBaseline()	string wlist, wn	variable  index=0,m	wlist=WaveList("*",";","WIN:")		do		wn=Stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w=$wn		m=mean($wn,.001,0.02)		w -=m		index +=1	while(1)	endfunction ZeroBaselineAtCursors()	string wlist, wn	variable  index=0,m,xvalueA,xvalueB	wlist=WaveList("*",";","WIN:")	xvalueA=xcsr(A)	xvalueB=xcsr(B)		do		wn=Stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w=$wn		m=mean($wn,xvalueA,xvalueB)		w -=m		index +=1	while(1)	endfunction BlankAtCursors()	// Linear interpolation between two points in top wave of top graph.	string/G TopWin	string wlist, wn	variable  index=0,slope	variable x_A=xcsr(A)	variable x_B=xcsr(B)	variable y_A=vcsr(A)	variable y_B=vcsr(B)	TopWin=WinList("*",";","WIN:")	wlist=WaveList("*",";","WIN:")		wn=Stringfromlist(0,wlist,";")			WAVE w=$wn	duplicate/O w,BlankatCursors_undoWave	w[x2pnt(w,x_A),x2pnt(w,x_B)-1]=NaNendfunction UndoBlankatCursors()	string wlist, wn	RemovefromGraph/Z showstimtimes	wlist=WaveList("*",";","WIN:")		wn=Stringfromlist(0,wlist,";")		print "undoing wave ", wn		WAVE w=$wn	if(waveexists(BlankatCursors_undoWave))	duplicate/O BlankatCursors_undoWave,w	Killwaves BlankatCursors_undoWave	else		abort "no wave to undo"	endifend		function GrabCurrentAxis()	variable/G CurrentYmin,CurrentYmax,CurrentXmin,CurrentXmax	variable/G RestoreFlag		GetAxis /Q left		if(V_flag==0)			CurrentYmin=V_min			CurrentYmax=V_max			Restoreflag=1			GetAxis /Q bottom			if(V_flag==0)				CurrentXmin=V_min				CurrentXmax=V_max				else				print "no bottom axis to grab"				Restoreflag=0			endif		else 			print "no left axis to grab"			Restoreflag=0		endifendfunction PasteAxis()	NVAR currentYmin=root:CurrentYmin	NVAR currentYmax=root:CurrentYmax	NVAR currentXmin=root:CurrentXmin	NVAR currentXmax=root:CurrentXmax	NVAR RestoreFlag=root:RestoreFlag		if(RestoreFlag)		SetAxis left CurrentYmin, CurrentYmax		SetAxis bottom CurrentXmin, CurrentXmax		//RestoreFlag=0	else		print "You must grab the axis first before restoring it"	endifendfunction MakeSumWave()	variable sumAM, sumBurst,sumCF	Make/N=3/O sumWave	sumAM= sum(NrmAvg_s3_3AM)	sumBurst= sum(NrmAvg_burst)	sumCF= sum(NrmAvg_CF)		sumWave=  {  sumAM, sumBurst,sumCF  }	display sumWave	ModifyGraph mode=5	SetAxis/A/E=1 left	Make/N=3/T ticklabel = {"AM", "burst", "CF"}	Make /N=3 tickpos = {0.5,1.5,2.5}	ModifyGraph userticks(bottom)={tickpos,ticklabel}	endProc SticktoZeroStyle() : GraphStyle	PauseUpdate; Silent 1		// modifying window...	ModifyGraph/Z mode=1	SetAxis/Z/A/E=1 leftEndMacrofunction CorrectBaselineAtCursors()	string wlist, wn	variable  index=0,m,xvalueA,xvalueB	Removefromgraph/Z slopecorrection, avg	wlist=WaveList("EvPMW*",";","WIN:")	xvalueA=xcsr(A)	xvalueB=xcsr(B)		Make/N=2/O Coeff	wn=Stringfromlist(0,wlist,";")		print wn	Duplicate/O $wn,avg	avg=0	Appendtograph avg	modifygraph rgb(avg)=(0,0,0)	do		wn=Stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w=$wn		m=mean($wn,xvalueA,xvalueB)		w -=m		avg+=w		index +=1	while(1)		avg/=index	CurveFit/NTHR=0/TBOX=0 line kwCWave=Coeff Avg[pcsr(A),pcsr(B)] /D 	duplicate/O avg, slopecorrection	slopecorrection= Coeff[0]+ Coeff[1]*x	appendtograph slopecorrection	modifygraph rgb(slopecorrection)=(0,0,655000)	index=0	do		wn=Stringfromlist(index,wlist,";")				if (strlen(wn)==0)			break		endif		WAVE w=$wn		m=mean($wn,xvalueA,xvalueB)		w -=slopecorrection		index +=1	while(1)		end